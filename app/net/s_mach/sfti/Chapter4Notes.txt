List(1,2,3)

Node(1) -> Node(2) -> Node(3) -> null

val l1 = Node(3) -> null
val l2 = Node(2) -> l1
val l3 = Node(1) -> l2
val l4 = Node(4) -> l1

Maps and Tuples
* create, query, traverse maps
* mutable vs. immutable maps
* conversion between scala and java maps
* tuples can aggregate values easily

basic map construction
val scores = Map("Alice" -> 10, "Jack" -> 20)
This is an immutable Map[String, Int] meaning it cannot be altered
To create an empty mutable map:
    val scores = scala.collection.mutable.Map[String, Int]()

Accessing
val bobsScore = scores("Bob") is the same as scores.get("Bob")
val bobsScore = scores.getOrElse("Bob", 0) addresses the if else case dependent on if the key exists

Updating - Must be mutable
scores("Bob") = 10
scores += ("Bob" -> 10, "Fred" -> 7) //to append multiple items
val newScores = scores + ("Bob" -> 10, "Fred" -> 7) //to create a new mutable map from an old immutable one

Removing
scores = scores - "Alice"
//immutability allows old and new maps to share most of the structure?

Iteration
for ((k,v) <- map) process k and v

Reverse the keys and values for a map
for ((k,v) <- map) yield (v, k)

Sorted Maps (Tree Maps)
val scores = scala.collection.immutable.SortedMap(...) //as of Scala 2.9 no mutable treemap

Java Interoperability
* convert scala map to java map
    import java.collection.JavaConversions.mapAsJavaMap
    import java.awt.font.TextAttribute._
    val attrs = Map(FAMILY -> "Serif", SIZE -> 12)
    val font = new java.awt.Font(attrs)

Tuples
Pairs are the most common case where n = 2
    *Accessing tuple components (BASE 1 Indexing)
        val t = (1, 3.14)
        val pi = t._2
    *Zipping (creating key value pairs)
        val symbols = Array("<", "-", ">")
        val counts = Array(2,10,2)
        val pairs = symbols.zip(counts)